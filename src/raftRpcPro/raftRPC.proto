syntax = "proto3";

package raftRpcProtoc; 

option cc_generic_services = true; //开启stub服务

// 日志实体
message LogEntry
{
    bytes Command = 1;
    int32 LogTerm = 2;
    int32 LogIndex = 3;
}

// 追加日志 RPC Request 由leader复制log条目，也可以当做是心跳连接，注释中的rf为leader节点
message AppendEntriesArgs
{
    int32 Term = 1;                 // 当前任期号
    int32 LeaderId = 2;             // leader Id
    int32 PrevLogIndex = 3;         // 前一个日志的日志号
    int32 PrevLogTerm = 4;          // 前一个日志的任期号
    repeated LogEntry Entries = 5;  // 当前日志体
    int32 LeaderCommit = 6;         // leader已提交任期号
}

// 追加日志 RPC Response
message AppendEntriesReply
{
	int32 Term  = 1;                 // leader的term可能是与Follower不同的，
	bool Success = 2;
	int32 UpdateNextIndex = 3;      // 快速调整leader对应的nextIndex
	int32 AppState = 4;             // 用来标识节点（网络）状态
}

// 请求投票 RPC Request
message RequestVoteArgs  
{
	int32 Term = 1;                 // 自己当前任期号
	int32 CandidateId = 2;          // 自己ID
	int32 LastLogIndex = 3;         // 自己最后一个日志号
	int32 LastLogTerm = 4;          // 自己最后一个日志日期
}


// 请求投票 RPC Response
message RequestVoteReply  
{
	// Your data here (2A).
	int32 Term = 1;                  // 自己当前任期号
	bool VoteGranted = 2;           // 自己会不会投票
	int32 VoteState = 3;
}


message InstallSnapshotRequest  
{
	int32 LeaderId = 1;
	int32 Term = 2;
	int32 LastSnapShotIncludeIndex = 3;
	int32 LastSnapShotIncludeTerm = 4;
	bytes Data = 5;//快照信息，当然是用bytes来传递
}

// InstallSnapshotResponse 只用返回Term，因为对于快照只要Term是符合的就是无条件接受的
message InstallSnapshotResponse 
{
	int32 Term = 1;
}

//只有raft节点之间才会涉及rpc通信
service raftRpc  
{
    // 日志复制
    rpc AppendEntries(AppendEntriesArgs) returns(AppendEntriesReply);
    // 快照
    rpc InstallSnapshot (InstallSnapshotRequest) returns (InstallSnapshotResponse);
    // 选举投票
    rpc RequestVote (RequestVoteArgs) returns (RequestVoteReply);
}